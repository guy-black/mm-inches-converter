{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","mm","useState","length","setLength","unitIn","setUnitIn","cmToIn","cm","inToCm","inch","convert","className","value","onChange","e","target","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4KAAAA,EAAOC,QAAU,IAA0B,kC,oHCuE5BC,MAnEf,WACE,IAAMC,EAAK,KADE,EAIeC,mBAAS,MAJxB,mBAINC,EAJM,KAIEC,EAJF,OAKeF,mBAAS,UALxB,mBAKNG,EALM,KAKEC,EALF,KAOb,SAASC,EAAOC,GAAI,OAAOA,EAAG,KAC9B,SAASC,EAAOC,GAAM,OAAY,KAALA,EAE7B,SAASC,IACP,MAAe,WAAXN,EACK,CAAEI,EAAON,GAAQF,EACfQ,EAAON,GAXJ,KAYHM,EAAON,GAXL,MAYHA,EACAM,EAAON,IACI,OAAXE,EACD,CAAEF,EAAOF,EACPE,EAjBG,KAkBHA,EAjBE,MAkBHI,EAAOJ,GACPA,GACW,OAAXE,EACD,CAACF,EACCA,GAvBG,KAuBaF,GAChBE,GAvBE,MAuBaF,GAChBM,EAAON,EAAGE,GACTA,EAAOF,GAEG,SAAXI,EACD,CAAEF,GAAQF,EA5BN,OA6BFE,GA9BG,KACD,OA8BHA,EACAI,EA/BG,MA+BIJ,GA/BJ,MAgCFA,GAEU,UAAXE,EACD,CAAEF,GAAQF,EApCL,MAqCJE,EACCA,GArCE,MADC,MAuCJI,EAvCI,KAuCWJ,GAvCX,KAwCHA,QALL,EAUR,OACE,yBAAKS,UAAU,OACb,4BAAQC,MAAOR,EAAQS,SAAU,SAAAC,GAAC,OAAIT,EAAUS,EAAEC,OAAOH,SACvD,4BAAQA,MAAM,MAAd,gBACA,4BAAQA,MAAM,QAAd,YACA,4BAAQA,MAAM,SAAd,aACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,MAAd,gBANJ,KAQK,2BAAOI,KAAK,SAASJ,MAAOV,EAAQW,SAAU,SAAAC,GAAC,OAAIX,EAAUW,EAAEC,OAAOH,UAAS,6BARpF,SASSF,IAAU,GAAG,6BATtB,eAUeA,IAAU,GAAG,6BAV5B,cAWcA,IAAU,GAAG,6BAX3B,WAYWA,IAAU,GAAG,6BAZxB,gBAagBA,IAAU,GAAG,+BCrDbO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.845e14d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const mm = 1.04;\n  const giantmm = 2.12;\n  const minimm = .9525;\n  const [length, setLength] = useState(null);\n  const [unitIn, setUnitIn] = useState(\"inches\");\n\n  function cmToIn(cm){return cm/2.54;}\n  function inToCm(inch){return inch*2.54; }\n\n  function convert() {\n    if (unitIn === \"inches\"){\n      return [(inToCm(length)/mm),\n              (inToCm(length)/giantmm),\n              (inToCm(length)/minimm),\n              length,\n              inToCm(length)];\n    }else if (unitIn === \"cm\"){\n      return [(length/mm),\n              (length/giantmm),\n              (length/minimm),\n              cmToIn(length),\n              length];\n    }else if (unitIn === \"mm\"){\n      return [length,\n              (length/(giantmm/mm)),\n              (length/(minimm/mm)),\n              cmToIn(mm*length),\n              (length*mm)\n            ];\n    }else if (unitIn === \"mini\"){\n      return [(length/(mm/minimm)),\n              (length/(giantmm/minimm)),\n              length,\n              cmToIn(length*minimm),\n              (length*minimm)\n            ];\n    }else if (unitIn === \"giant\"){\n      return [(length/(mm/giantmm)),\n              length,\n              (length*(minimm/giantmm)),\n              cmToIn(giantmm*length),\n              (length*giantmm)\n            ];\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <select value={unitIn} onChange={e => setUnitIn(e.target.value)}>\n        <option value=\"mm\">Standard M&M</option>\n        <option value=\"mini\">Mini M&M</option>\n        <option value=\"giant\">Giant M&M</option>\n        <option value=\"inches\">inches</option>\n        <option value=\"cm\">centimeters</option>\n      </select>\n       : <input type=\"number\" value={length} onChange={e => setLength(e.target.value)}/><br/>\n      M&Ms: {convert()[0]}<br/>\n      Giant M&Ms: {convert()[1]}<br/>\n      Mini M&Ms: {convert()[2]}<br/>\n      inches: {convert()[3]}<br/>\n      centimeters: {convert()[4]}<br/>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}